---
import Analytics from '~/components/widgets/analytics.astro';
---

<Analytics

	id="streaming"
	title="Công cụ phát video chất lượng cao trực tuyến"
	description="Hướng dẫn: Sao chép và dán liên kết cần phát video, công cụ sẽ chạy trình phát nhanh chóng và miễn phí."

	inputType="text"
	outputType="video"

	placeholder="Vui lòng nhập liên kết cần phát video ở đây."
	debounceTime={1000}

/>

<script client:load>

	document.addEventListener('DOMContentLoaded', () => {

		const id = 'streaming';
		const urlInput = document.getElementById(`${id}-input`);
		const videoPlayer = document.getElementById(`${id}-streaming`);
		const statusDiv = document.getElementById(`${id}-status`);
		let currentVideo = '';

		function isYouTubeUrl(url) {
			return url.includes('youtube.com') || url.includes('youtu.be');
		}

		function extractYouTubeId(url) {
			let videoId = '';
			if (url.includes('youtube.com/watch?v=')) {
				videoId = url.split('v=')[1];
			} else if (url.includes('youtu.be/')) {
				videoId = url.split('youtu.be/')[1];
			}
			const ampersandPosition = videoId.indexOf('&');
			if (ampersandPosition !== -1) {
				videoId = videoId.substring(0, ampersandPosition);
			}
			return videoId;
		}

		async function getVideoUrl(inputUrl) {
			if (isYouTubeUrl(inputUrl)) {
				const videoId = extractYouTubeId(inputUrl);
				if (videoId) {
					return {
						type: 'youtube',
						url: `https://www.youtube.com/embed/${videoId}?autoplay=1`
					};
				}
			}
			
			if (inputUrl.includes('drive.google.com')) {
				const fileId = inputUrl.match(/[-\w]{25,}/);
				if (fileId) {
					return {
						type: 'iframe',
						url: `https://drive.google.com/file/d/${fileId[0]}/preview`
					};
				}
			}

			if (inputUrl.includes('1drv.ms') || inputUrl.includes('onedrive.live.com')) {
				return {
					type: 'iframe',
					url: inputUrl.replace('view.aspx', 'embed')
				};
			}

			return {
				type: 'video',
				url: inputUrl
			};
		}

		function createVideoElement(videoData) {
			let videoElement;
			
			switch(videoData.type) {
				case 'youtube':
				case 'iframe':
					videoElement = document.createElement('iframe');
					videoElement.setAttribute('allowfullscreen', '');
					videoElement.setAttribute('frameborder', '0');
					videoElement.setAttribute('allow', 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture');
					break;
				
				case 'video':
				default:
					videoElement = document.createElement('video');
					videoElement.setAttribute('controls', '');
					videoElement.setAttribute('autoplay', '');
					break;
			}

			videoElement.setAttribute('width', '100%');
			videoElement.setAttribute('height', '100%');
			videoElement.setAttribute('class', 'w-full h-full');
			videoElement.setAttribute('id', `${id}-current-video`);

			return videoElement;
		}

		async function playVideo(url) {
			try {
				statusDiv.textContent = 'Đang tải video…';
				const videoData = await getVideoUrl(url);
				
				if (videoData) {
					const videoContainer = document.getElementById(`${id}-video-container`);
					const oldVideo = document.getElementById(`${id}-current-video`);
					if (oldVideo) {
						oldVideo.remove();
					}

					const videoElement = createVideoElement(videoData);
					videoElement.src = videoData.url;
					videoContainer.appendChild(videoElement);

					videoElement.onerror = () => {
						statusDiv.textContent = 'Không thể phát video này. Vui lòng kiểm tra lại URL.';
						videoElement.remove();
					};

					videoElement.onload = () => {
						statusDiv.textContent = `Đang phát video (${videoData.type})`;
					};

					currentVideo = url;
				} else {
					statusDiv.textContent = 'Không thể xử lý URL video này';
				}
			} catch (error) {
				console.error('Error playing video:', error);
				statusDiv.textContent = 'Có lỗi xảy ra khi tải video';
			}
		}

		let debounceTimeout;
		urlInput.addEventListener('input', () => {
			const url = urlInput.value.trim();
			clearTimeout(debounceTimeout);

			if (!url) {
				statusDiv.textContent = 'Vui lòng nhập URL video';
				const videoContainer = document.getElementById(`${id}-video-container`);
				const oldVideo = document.getElementById(`${id}-current-video`);
				if (oldVideo) {
					oldVideo.remove();
				}
				return;
			}

			debounceTimeout = setTimeout(() => {
				if (url !== currentVideo) {
					playVideo(url);
				}
			}, 500);
		});
	});

</script>