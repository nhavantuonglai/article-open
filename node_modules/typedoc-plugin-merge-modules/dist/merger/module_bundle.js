"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleBundle = void 0;
const utils_1 = require("../utils");
/**
 * Name of the comment tag that can be used to mark a module as the target module within the bundle.
 * The target module is the one into which all the modules of the bundle are merged.
 */
const targetModuleCommentTag = "@mergeTarget";
/**
 * Class representing a group of modules.
 */
class ModuleBundle {
    /**
     * Creates a new module bundle instance.
     * @param project The project in which all modules are in.
     */
    constructor(project) {
        /** The modules of the bundle. */
        this.modules = new Array();
        this.project = project;
    }
    /**
     * Adds a module to the bundle.
     * @param module The module to add.
     */
    add(module) {
        this.modules.push(module);
    }
    /**
     * Merges the modules of the bundle into one module.
     */
    merge() {
        const childrenOfAllModules = this.modules
            .map((m) => m.children)
            .filter((m) => m !== undefined)
            .reduce((acc, val) => acc.concat(val), []);
        // get target module
        const targetModule = this.getTargetModule();
        (0, utils_1.removeTagFromCommentsOf)(targetModule, targetModuleCommentTag);
        // set target module for all children
        childrenOfAllModules.forEach((child) => (child.parent = targetModule));
        targetModule.children = childrenOfAllModules;
        this.mergeCategoriesIntoTargetModule(targetModule);
        this.mergeGroupsIntoTargetModule(targetModule);
        // remove rest modules
        this.modules.forEach((module) => {
            if (module !== targetModule) {
                delete module.children;
                this.project.removeReflection(module);
            }
        });
    }
    /**
     * Returns the module from the bundle that should be used as the target module.
     * @returns The target module.
     */
    getTargetModule() {
        // 1. search for the first module which is marked with a specific tag
        const firstModuleWithTargetTag = this.modules.find((module) => module.comment && module.comment.blockTags.findIndex((ct) => ct.tag === targetModuleCommentTag) !== -1);
        if (firstModuleWithTargetTag) {
            return firstModuleWithTargetTag;
        }
        // 2. search for the first module with a comment
        const firstModuleWithComment = this.modules.find((module) => { var _a, _b; return ((_b = (_a = module.comment) === null || _a === void 0 ? void 0 : _a.summary.length) !== null && _b !== void 0 ? _b : 0) > 0; });
        if (firstModuleWithComment) {
            return firstModuleWithComment;
        }
        // 3. default: pick the first module
        return this.modules[0];
    }
    /**
     * Merges the children from all modules' categories into the corresponding category of the given target module.
     * @param targetModule The target module into whoes categories the children should be merged.
     */
    mergeCategoriesIntoTargetModule(targetModule) {
        var _a;
        // merge categories
        this.modules.forEach((module) => {
            var _a;
            if (module !== targetModule) {
                (_a = module.categories) === null || _a === void 0 ? void 0 : _a.forEach((category) => {
                    var _a, _b;
                    const existingTargetCategory = (_a = targetModule.categories) === null || _a === void 0 ? void 0 : _a.find((c) => c.title === category.title);
                    if (!existingTargetCategory) {
                        targetModule.categories = [...((_b = targetModule.categories) !== null && _b !== void 0 ? _b : []), category];
                    }
                    else {
                        existingTargetCategory.children = existingTargetCategory.children.concat(category.children);
                    }
                });
            }
        });
        // sort categories
        (_a = targetModule.categories) === null || _a === void 0 ? void 0 : _a.forEach((category) => {
            category.children.sort((a, b) => {
                if (a.name > b.name) {
                    return 1;
                }
                else if (a.name === b.name) {
                    return 0;
                }
                return -1;
            });
        });
    }
    /**
     * Merges the children from all modules' groups into the corresponding group of the given target module.
     * @param targetModule The target module into whoes groups the children should be merged.
     */
    mergeGroupsIntoTargetModule(targetModule) {
        var _a;
        // merge groups
        this.modules.forEach((module) => {
            var _a;
            if (module !== targetModule) {
                (_a = module.groups) === null || _a === void 0 ? void 0 : _a.forEach((group) => {
                    var _a, _b;
                    const existingTargetGroup = (_a = targetModule.groups) === null || _a === void 0 ? void 0 : _a.find((g) => g.title === group.title);
                    if (!existingTargetGroup) {
                        targetModule.groups = [...((_b = targetModule.groups) !== null && _b !== void 0 ? _b : []), group];
                    }
                    else {
                        existingTargetGroup.children = existingTargetGroup.children.concat(group.children);
                    }
                });
            }
        });
        // sort groups
        (_a = targetModule.groups) === null || _a === void 0 ? void 0 : _a.forEach((group) => {
            group.children.sort((a, b) => {
                if (a.name > b.name) {
                    return 1;
                }
                else if (a.name === b.name) {
                    return 0;
                }
                return -1;
            });
        });
    }
}
exports.ModuleBundle = ModuleBundle;
