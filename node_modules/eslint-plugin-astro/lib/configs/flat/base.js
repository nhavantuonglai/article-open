"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = __importDefault(require("globals"));
const parser = __importStar(require("astro-eslint-parser"));
const has_typescript_eslint_parser_1 = require("../has-typescript-eslint-parser");
const index_1 = require("../../environments/index");
exports.default = [
    {
        plugins: {
            get astro() {
                return require("../../index");
            },
        },
    },
    {
        files: ["*.astro", "**/*.astro"],
        languageOptions: {
            globals: Object.assign(Object.assign({}, globals_1.default.node), index_1.environments.astro.globals),
            parser,
            sourceType: "module",
            parserOptions: {
                parser: has_typescript_eslint_parser_1.tsESLintParser !== null && has_typescript_eslint_parser_1.tsESLintParser !== void 0 ? has_typescript_eslint_parser_1.tsESLintParser : undefined,
                extraFileExtensions: [".astro"],
            },
        },
        rules: {},
        processor: has_typescript_eslint_parser_1.hasTypescriptEslintParser
            ? "astro/client-side-ts"
            : "astro/astro",
    },
    {
        files: ["**/*.astro/*.js", "*.astro/*.js"],
        languageOptions: {
            globals: Object.assign({}, globals_1.default.browser),
            sourceType: "module",
        },
        rules: {
            "prettier/prettier": "off",
        },
    },
    {
        files: ["**/*.astro/*.ts", "*.astro/*.ts"],
        languageOptions: {
            globals: Object.assign({}, globals_1.default.browser),
            parser: has_typescript_eslint_parser_1.tsESLintParser !== null && has_typescript_eslint_parser_1.tsESLintParser !== void 0 ? has_typescript_eslint_parser_1.tsESLintParser : undefined,
            sourceType: "module",
            parserOptions: {
                project: null,
            },
        },
        rules: {
            "prettier/prettier": "off",
        },
    },
];
