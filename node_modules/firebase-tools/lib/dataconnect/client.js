"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.upsertConnector = exports.listConnectors = exports.deleteConnector = exports.getConnector = exports.upsertSchema = exports.getSchema = exports.deleteService = exports.createService = exports.listServices = exports.listAllServices = exports.listLocations = void 0;
const api_1 = require("../api");
const apiv2_1 = require("../apiv2");
const operationPoller = require("../operation-poller");
const types = require("./types");
const logger_1 = require("../logger");
const DATACONNECT_API_VERSION = "v1alpha";
const dataconnectClient = () => new apiv2_1.Client({
    urlPrefix: (0, api_1.dataconnectOrigin)(),
    apiVersion: DATACONNECT_API_VERSION,
    auth: true,
});
async function listLocations(projectId) {
    var _a, _b, _c;
    const res = await dataconnectClient().get(`/projects/${projectId}/locations`);
    return (_c = (_b = (_a = res.body) === null || _a === void 0 ? void 0 : _a.locations) === null || _b === void 0 ? void 0 : _b.map((l) => l.locationId)) !== null && _c !== void 0 ? _c : [];
}
exports.listLocations = listLocations;
async function listAllServices(projectId) {
    const locations = await listLocations(projectId);
    let services = [];
    await Promise.all(locations.map(async (l) => {
        try {
            const locationServices = await listServices(projectId, l);
            services = services.concat(locationServices);
        }
        catch (err) {
            logger_1.logger.debug(`Unable to listServices in ${l}: ${err}`);
        }
    }));
    return services;
}
exports.listAllServices = listAllServices;
async function listServices(projectId, locationId) {
    var _a;
    const res = await dataconnectClient().get(`/projects/${projectId}/locations/${locationId}/services`);
    return (_a = res.body.services) !== null && _a !== void 0 ? _a : [];
}
exports.listServices = listServices;
async function createService(projectId, locationId, serviceId) {
    const op = await dataconnectClient().post(`/projects/${projectId}/locations/${locationId}/services`, {
        name: `projects/${projectId}/locations/${locationId}/services/${serviceId}`,
    }, {
        queryParams: {
            service_id: serviceId,
        },
    });
    const pollRes = await operationPoller.pollOperation({
        apiOrigin: (0, api_1.dataconnectOrigin)(),
        apiVersion: DATACONNECT_API_VERSION,
        operationResourceName: op.body.name,
    });
    return pollRes;
}
exports.createService = createService;
async function deleteService(projectId, locationId, serviceId) {
    const op = await dataconnectClient().delete(`projects/${projectId}/locations/${locationId}/services/${serviceId}`);
    const pollRes = await operationPoller.pollOperation({
        apiOrigin: (0, api_1.dataconnectOrigin)(),
        apiVersion: DATACONNECT_API_VERSION,
        operationResourceName: op.body.name,
    });
    return pollRes;
}
exports.deleteService = deleteService;
async function getSchema(serviceName) {
    const res = await dataconnectClient().get(`${serviceName}/schemas/${types.SCHEMA_ID}`);
    return res.body;
}
exports.getSchema = getSchema;
async function upsertSchema(schema, validateOnly = false) {
    const op = await dataconnectClient().patch(`${schema.name}`, schema, {
        queryParams: {
            allowMissing: "true",
            validateOnly: validateOnly ? "true" : "false",
        },
    });
    if (validateOnly) {
        return;
    }
    return operationPoller.pollOperation({
        apiOrigin: (0, api_1.dataconnectOrigin)(),
        apiVersion: DATACONNECT_API_VERSION,
        operationResourceName: op.body.name,
    });
}
exports.upsertSchema = upsertSchema;
async function getConnector(name) {
    const res = await dataconnectClient().get(name);
    return res.body;
}
exports.getConnector = getConnector;
async function deleteConnector(name) {
    const res = await dataconnectClient().delete(name);
    return res.body;
}
exports.deleteConnector = deleteConnector;
async function listConnectors(serviceName) {
    var _a;
    const res = await dataconnectClient().get(`${serviceName}/connectors`);
    return ((_a = res.body) === null || _a === void 0 ? void 0 : _a.connectors) || [];
}
exports.listConnectors = listConnectors;
async function upsertConnector(connector) {
    const op = await dataconnectClient().patch(`${connector.name}?allow_missing=true`, connector);
    const pollRes = await operationPoller.pollOperation({
        apiOrigin: (0, api_1.dataconnectOrigin)(),
        apiVersion: DATACONNECT_API_VERSION,
        operationResourceName: op.body.name,
    });
    return pollRes;
}
exports.upsertConnector = upsertConnector;
