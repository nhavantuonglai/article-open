"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const load_1 = require("../../dataconnect/load");
const fileUtils_1 = require("../../dataconnect/fileUtils");
const logger_1 = require("../../logger");
const utils = require("../../utils");
const projectUtils_1 = require("../../projectUtils");
const filters_1 = require("../../dataconnect/filters");
const build_1 = require("../../dataconnect/build");
const ensureApis_1 = require("../../dataconnect/ensureApis");
const requireTosAcceptance_1 = require("../../requireTosAcceptance");
const firedata_1 = require("../../gcp/firedata");
async function default_1(context, options) {
    const projectId = (0, projectUtils_1.needProjectId)(options);
    await (0, ensureApis_1.ensureApis)(projectId);
    await (0, requireTosAcceptance_1.requireTosAcceptance)(firedata_1.DATA_CONNECT_TOS_ID)(options);
    const serviceCfgs = (0, fileUtils_1.readFirebaseJson)(options.config);
    utils.logLabeledBullet("dataconnect", `Preparing to deploy`);
    const filters = (0, filters_1.getResourceFilters)(options);
    const serviceInfos = await Promise.all(serviceCfgs.map((c) => (0, load_1.load)(projectId, c.location, path.join(options.cwd || process.cwd(), c.source))));
    for (const si of serviceInfos) {
        si.deploymentMetadata = await (0, build_1.build)(options, si.sourceDirectory);
    }
    context.dataconnect = {
        serviceInfos,
        filters,
    };
    utils.logLabeledBullet("dataconnect", `Successfully prepared schema and connectors`);
    logger_1.logger.debug(JSON.stringify(context.dataconnect, null, 2));
    return;
}
exports.default = default_1;
