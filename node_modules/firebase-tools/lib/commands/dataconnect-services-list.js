"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = void 0;
const command_1 = require("../command");
const projectUtils_1 = require("../projectUtils");
const names = require("../dataconnect/names");
const client = require("../dataconnect/client");
const logger_1 = require("../logger");
const requirePermissions_1 = require("../requirePermissions");
const ensureApis_1 = require("../dataconnect/ensureApis");
const Table = require("cli-table");
exports.command = new command_1.Command("dataconnect:services:list")
    .description("list all deployed services in your Firebase project")
    .before(requirePermissions_1.requirePermissions, [
    "dataconnect.services.list",
    "dataconnect.schemas.list",
    "dataconnect.connectors.list",
])
    .action(async (options) => {
    var _a, _b, _c, _d, _e, _f;
    const projectId = (0, projectUtils_1.needProjectId)(options);
    await (0, ensureApis_1.ensureApis)(projectId);
    const services = await client.listAllServices(projectId);
    const table = new Table({
        head: [
            "Service ID",
            "Location",
            "Data Source",
            "Schema Last Updated",
            "Connector ID",
            "Connector Last Updated",
        ],
        style: { head: ["yellow"] },
    });
    const jsonOutput = { services: [] };
    for (const service of services) {
        let schema = {
            name: "",
            primaryDatasource: {},
            source: { files: [] },
        };
        try {
            schema = await client.getSchema(service.name);
        }
        catch (err) {
            logger_1.logger.debug(`Error fetching schema: ${err}`);
        }
        const connectors = await client.listConnectors(service.name);
        const serviceName = names.parseServiceName(service.name);
        const instanceName = (_b = (_a = schema === null || schema === void 0 ? void 0 : schema.primaryDatasource.postgresql) === null || _a === void 0 ? void 0 : _a.cloudSql.instance) !== null && _b !== void 0 ? _b : "";
        const instanceId = instanceName.split("/").pop();
        const dbId = (_d = (_c = schema === null || schema === void 0 ? void 0 : schema.primaryDatasource.postgresql) === null || _c === void 0 ? void 0 : _c.database) !== null && _d !== void 0 ? _d : "";
        const dbName = `CloudSQL Instance: ${instanceId}\nDatabase:${dbId}`;
        table.push([
            serviceName.serviceId,
            serviceName.location,
            dbName,
            (_e = schema === null || schema === void 0 ? void 0 : schema.updateTime) !== null && _e !== void 0 ? _e : "",
            "",
            "",
        ]);
        const serviceJson = {
            serviceId: serviceName.serviceId,
            location: serviceName.location,
            datasource: dbName,
            schemaUpdateTime: schema === null || schema === void 0 ? void 0 : schema.updateTime,
            connectors: [],
        };
        for (const conn of connectors) {
            const connectorName = names.parseConnectorName(conn.name);
            table.push(["", "", "", "", connectorName.connectorId, conn.updateTime]);
            serviceJson.connectors.push({
                connectorId: connectorName.connectorId,
                connectorLastUpdated: (_f = conn.updateTime) !== null && _f !== void 0 ? _f : "",
            });
        }
        jsonOutput.services.push(serviceJson);
    }
    logger_1.logger.info(table.toString());
    return jsonOutput;
});
