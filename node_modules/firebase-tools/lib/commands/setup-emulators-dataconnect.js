"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = void 0;
const command_1 = require("../command");
const types_1 = require("../emulator/types");
const emulators_1 = require("../init/features/emulators");
const prompt_1 = require("../prompt");
const logger_1 = require("../logger");
const downloadableEmulators_1 = require("../emulator/downloadableEmulators");
const NAME = types_1.Emulators.DATACONNECT;
exports.command = new command_1.Command(`setup:emulators:${NAME}`)
    .description(`downloads the ${NAME} emulator`)
    .action(async (options) => {
    var _a, _b;
    await (0, downloadableEmulators_1.downloadIfNecessary)(NAME);
    if (!options.config) {
        logger_1.logger.info("Not currently in a Firebase project directory. Run this command from a project directory to configure the Data Connect emulator.");
        return;
    }
    if (!options.nonInteractive) {
        const dataconnectEmulatorConfig = options.rc.getDataconnect();
        const defaultConnectionString = (_b = (_a = dataconnectEmulatorConfig === null || dataconnectEmulatorConfig === void 0 ? void 0 : dataconnectEmulatorConfig.postgres) === null || _a === void 0 ? void 0 : _a.localConnectionString) !== null && _b !== void 0 ? _b : emulators_1.DEFAULT_POSTGRES_CONNECTION;
        const localConnectionString = await (0, prompt_1.promptOnce)({
            type: "input",
            name: "localConnectionString",
            message: `What is the connection string of the local Postgres instance you would like to use with the Data Connect emulator?`,
            default: defaultConnectionString,
        });
        options.rc.setDataconnect(localConnectionString);
    }
    logger_1.logger.info("Setup complete!");
});
