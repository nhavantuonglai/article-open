---
import Analytics from '~/components/widgets/analytics.astro';
---
<section class="relative md:-mt-[76px] not-prose">

	<Analytics

		id="tv-player"
		title="TV Online"
		description="Xem truyền hình trực tuyến"

		outputType="video"
		inputType="button"

		channels={[
			{ name: "VTV1 HD", url: "https://youtu.be/Fp5ghKduTK8" },
			{ name: "VTV3 HD", url: "https://example.com/vtv3.m3u8" }
		]}

	/>

</section>

<script client:load>

	document.addEventListener('DOMContentLoaded', () => {
		const id = 'tv-player';
		const searchInput = document.getElementById(`${id}-search`);
		const channelList = document.getElementById(`${id}-channel-list`);
		const videoPlayer = document.getElementById(`${id}-video-player`);
		const videoSource = document.getElementById(`${id}-video-source`);
		const statusDiv = document.getElementById(`${id}-status`);
		const channelButtons = document.querySelectorAll(`#${id}-buttons button`);

		let channels = [];
		let currentChannelIndex = -1;
		let statusInterval;

		async function fetchChannels() {
			try {
				const response = await fetch('YOUR_API_ENDPOINT');
				channels = await response.json();
				renderChannelList(channels);
			} catch (error) {
				console.error('Error fetching channels:', error);
				statusDiv.textContent = 'Lỗi: Không thể tải danh sách kênh.';
			}
		}

		function renderChannelList(channelData) {
			channelList.innerHTML = channelData.map((channel, index) => `
				<button 
					class="w-full px-4 py-2 text-left hover:bg-gray-100 focus:outline-none"
					data-url="${channel.url}"
					data-index="${index}"
				>
					${channel.name}
				</button>
			`).join('');

			const buttons = channelList.querySelectorAll('button');
			buttons.forEach(button => {
				button.addEventListener('click', () => {
					playChannel(parseInt(button.dataset.index));
				});
			});
		}

		function searchChannels(query) {
			const filteredChannels = channels.filter(channel => 
				channel.name.toLowerCase().includes(query.toLowerCase())
			);
			renderChannelList(filteredChannels);
		}

		function playChannel(index) {
			currentChannelIndex = index;
			const channel = channels[index];
			
			if (videoPlayer.canPlayType('application/vnd.apple.mpegurl')) {
				videoSource.src = channel.url;
				videoPlayer.load();
				videoPlayer.play()
					.then(() => {
						updateButtons();
						updateStatus(channel.name);
					})
					.catch(error => {
						console.error(error);
						statusDiv.textContent = 'Lỗi: Không thể phát kênh này.';
					});
			} else {

				if (Hls.isSupported()) {
					const hls = new Hls();
					hls.loadSource(channel.url);
					hls.attachMedia(videoPlayer);
					hls.on(Hls.Events.MANIFEST_PARSED, () => {
						videoPlayer.play();
						updateButtons();
						updateStatus(channel.name);
					});
				}
			}
		}

		function updateButtons() {
			channelButtons.forEach((btn, index) => {
				btn.classList.toggle('bg-primary', index === currentChannelIndex);
				btn.classList.toggle('text-white', index === currentChannelIndex);
			});
		}

		function updateStatus(channelName) {
			clearInterval(statusInterval);
			statusInterval = setInterval(() => {
				const quality = videoPlayer.videoHeight >= 720 ? 'HD' : 'SD';
				statusDiv.textContent = `Đang phát: ${channelName} (${quality})`;
			}, 1000);
		}

		searchInput.addEventListener('input', (e) => {
			searchChannels(e.target.value);
		});
		document.getElementById(`${id}-play`).addEventListener('click', () => {
			if (currentChannelIndex === -1) {
				playChannel(0);
			} else {
				videoPlayer.play();
			}
		});

		document.getElementById(`${id}-pause`).addEventListener('click', () => {
			videoPlayer.pause();
		});

		document.getElementById(`${id}-prev`).addEventListener('click', () => {
			if (currentChannelIndex > 0) {
				playChannel(currentChannelIndex - 1);
			}
		});

		document.getElementById(`${id}-next`).addEventListener('click', () => {
			if (currentChannelIndex < channels.length - 1) {
				playChannel(currentChannelIndex + 1);
			}
		});

		fetchChannels();
	});

</script>