---
import Button from '~/components/ui/button.astro';
import CTA from '~/components/widgets/services.astro';
---

<section class="relative md:-mt-[76px] not-prose">
	<div class="absolute inset-0 pointer-events-none" aria-hidden="true"></div>
	<div class="mx-auto max-w-7xl md:px-6 px-4">

		<div class="border border-primary bg-white text-black p-4 rounded-lg mb-6">

			<h2 class="font-bold text-lg mb-6">Nhập từ tiếng Anh</h2>

			<textarea id="inputWord" placeholder="Nhập từ tiếng Anh để tra cứu nghĩa." class="w-full mb-6 text-justify text-lg dark:text-slate-400 border border-gray-300 p-4 rounded-lg break-words bg-white dark:bg-slate-900" required style="resize: none; height: 150px;"></textarea>

		</div>

		<div class="border border-primary bg-white text-black p-4 rounded-lg mb-6">

			<h2 class="font-bold text-lg mb-6">Kết quả từ điển</h2>

			<div id="outputArea" class="overflow-y-auto h-[calc(407px-80px)] p-2 rounded text-justify mb-6 text-lg dark:text-slate-400">
				Kết quả tra cứu nghĩa từ hiển thị tại đây.
			</div>

			<div class="w-full bg-gray-200 rounded h-2 mb-6">
				<div id="progressBar" class="h-2 bg-primary rounded" style="width: 0%;"></div>
			</div>

		</div>
	</div>

	<script client:load>
		document.addEventListener('DOMContentLoaded', () => {
			const wordInput = document.getElementById('inputWord');
			const resultOutput = document.getElementById('outputArea');
			const progressBar = document.getElementById('progressBar');

			let debounceTimeout;

			wordInput.addEventListener('input', () => {
				const word = wordInput.value.trim();

				clearTimeout(debounceTimeout);

				if (!word) {
					resultOutput.textContent = 'Vui lòng nhập từ để tra cứu.';
					progressBar.style.width = '0%';
					progressBar.style.display = 'none';
					return;
				}

				debounceTimeout = setTimeout(async () => {
					resultOutput.textContent = 'Đang tra cứu…';
					progressBar.style.width = '10%';
					progressBar.style.display = 'block';

					try {
						const response = await fetch('https://api.dictionaryapi.dev/api/v2/entries/en/' + word);

						if (!response.ok) {
							throw new Error('Từ này không có nghĩa.');
						}

						const data = await response.json();
						progressBar.style.width = '50%';

						if (data && Array.isArray(data) && data.length > 0) {
							const meanings = data[0].meanings.map((meaning, index) => {
								return `Loại từ: ${meaning.partOfSpeech}<br>Nghĩa: ${meaning.definitions.map(def => def.definition).join('; ')}<br>`;
							}).join('<br>');

							setTimeout(() => {
								resultOutput.innerHTML = `<strong>Từ:</strong> ${word}<br>${meanings}`;
							}, 1000);
						} else {
							resultOutput.textContent = 'Từ này không có nghĩa.';
						}

					} catch (error) {
						resultOutput.textContent = 'Có lỗi xảy ra.';
						console.error(error);
					}

					setTimeout(() => {
						progressBar.style.width = '100%';
					}, 1000);

					setTimeout(() => {
						progressBar.style.display = 'none';
					}, 1500);

				}, 500);
			});
		});
	</script>

</section>