---
import Analytics from '~/components/widgets/analytics.astro';
---

<Analytics

	id="subtitle"
	title="Công cụ dịch phụ đề AI trực tuyến"
	description="Hướng dẫn: Chọn, tải lên tệp phụ đề tiếng Anh, công cụ sẽ sử dụng AI để chuyển ngữ sang tiếng Việt nhanh chóng và miễn phí."

	placeholder="Vui lòng nhập tệp phụ đề cần dịch sang tiếng Việt ở đây."
	debounceTime={1000}

	inputType="file"
	outputType="text"
	accept=".srt"

/>

<script client:load>

	document.addEventListener('DOMContentLoaded', () => {
		const fileInput = document.getElementById('subtitle-input');
		const outputArea = document.getElementById('subtitle-text-output');
		const apiKey = 'null';
		let debounceTimeout;
		
		let originalFileName = '';
		let translatedLines = [];
		let downloadButton = null;

		function createDownloadButton(content) {
			const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
			const url = URL.createObjectURL(blob);
			
			if (!downloadButton) {
				downloadButton = document.createElement('a');
				downloadButton.className = 'inline-block px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 mt-4';
				document.body.appendChild(downloadButton);
			}
			
			downloadButton.href = url;
			downloadButton.download = `${originalFileName}-vi.srt`;
			downloadButton.textContent = 'Tải xuống phụ đề đã dịch.';
			downloadButton.style.display = 'block';
		}

		function updateOutput(message, isError = false) {
			const messageElement = document.createElement('div');
			messageElement.className = isError ? 'text-red-500' : 'text-gray-700';
			messageElement.textContent = message;
			
			outputArea.appendChild(messageElement);
			
			while (outputArea.childNodes.length > 10) {
				outputArea.removeChild(outputArea.firstChild);
			}
			
			outputArea.scrollTop = outputArea.scrollHeight;
		}

		async function translateSubtitle(text) {
			return new Promise((resolve, reject) => {
				clearTimeout(debounceTimeout);
				debounceTimeout = setTimeout(async () => {
					try {
						const response = await fetch(
							`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${apiKey}`,
							{
								method: 'POST',
								headers: {
									'Content-Type': 'application/json',
								},
								body: JSON.stringify({
									contents: [{
										parts: [{
											text: `Translate this subtitle to Vietnamese, keep the timing and subtitle number intact: ${text}`
										}]
									}]
								})
							}
						);

						if (!response.ok) throw new Error('Có lỗi xảy ra trong quá trình xử lý.');
						
						const result = await response.json();
						resolve(result.candidates[0]?.content?.parts?.[0]?.text || '');
					} catch (error) {
						console.error('Translation error:', error);
						reject(error);
					}
				}, 500);
			});
		}

		function parseSRT(content) {
			const blocks = content.trim().split('\n\n');
			return blocks.map(block => {
				const lines = block.split('\n');
				return {
					id: lines[0],
					timing: lines[1],
					text: lines.slice(2).join('\n')
				};
			});
		}

		fileInput.addEventListener('change', async (event) => {
			const file = event.target.files[0];
			if (!file) return;
			
			if (!file.name.toLowerCase().endsWith('.srt')) {
				updateOutput('Vui lòng chọn file phụ đề .srt.', true);
				return;
			}

			originalFileName = file.name.replace('.srt', '');
			translatedLines = [];
			if (downloadButton) downloadButton.style.display = 'none';
			
			const reader = new FileReader();
			reader.onload = async (e) => {
				try {
					const content = e.target.result;
					const subtitles = parseSRT(content);
					
					updateOutput(`Bắt đầu dịch ${subtitles.length} đoạn phụ đề…`);
					
					let translatedContent = '';
					for (let i = 0; i < subtitles.length; i++) {
						updateOutput(`Đang dịch đoạn ${i + 1}/${subtitles.length}…`);
						
						try {
							const translatedText = await translateSubtitle(subtitles[i].text);
							translatedContent += `${subtitles[i].id}\n${subtitles[i].timing}\n${translatedText}\n\n`;
						} catch (error) {
							updateOutput(`Lỗi khi dịch đoạn ${i + 1}.`, true);
							continue;
						}
					}
					
					createDownloadButton(translatedContent);
					updateOutput('Hoàn thành dịch phụ đề.');
					
				} catch (error) {
					updateOutput('Có lỗi xảy ra trong quá trình xử lý.', true);
					console.error(error);
				}
			};
			
			reader.readAsText(file);
		});
	});

</script>