---
import Button from '~/components/ui/button.astro';
import CTA from '~/components/widgets/services.astro';
---

<section class="relative md:-mt-[76px] not-prose">
	<div class="absolute inset-0 pointer-events-none" aria-hidden="true"></div>
	<div class="mx-auto max-w-7xl md:px-6 px-4">
		<div class="bg-white text-black p-4 rounded-lg mb-6">
			<h2 class="font-bold text-lg mb-6">Nhập phụ đề</h2>
			<div id="customDropzone" class="flex flex-col items-center justify-center p-6 rounded-md bg-gray-50 mb-6" style="resize: none; height: 150px;">
				<p class="text-gray-500">
					<button id="fileUploadButton" class="mb-6 text-lg font-medium leading-6 rtl:mr-2">Chọn phụ đề.</button>
				</p>
				<input type="file" id="srtFile" class="hidden" accept=".srt" />
			</div>
			<input type="text" id="apiKey" placeholder="Nhập API để dịch." class="w-full mb-6 text-justify text-lg dark:text-slate-400 p-4 rounded-lg break-words bg-white dark:bg-slate-900">
			<button id="translateBtn" class="btn-primary w-auto mb-6">Dịch phụ đề AI</button>
		</div>
		<!-- Output Section with Progress Bar -->
		<div class="border border-primary bg-white text-black p-4 rounded-lg">
			<h2 class="font-bold text-lg mb-6">Nhận phụ đề tốt hơn</h2>
			<div id="previewArea" class="overflow-y-auto h-[calc(407px-80px)] p-2 rounded text-justify mb-6 text-lg"></div>
			<div class="w-full bg-gray-200 rounded h-2 mb-6">
				<div id="progressBar" class="h-2 bg-primary rounded" style="width: 0%;"></div>
			</div>
			<a id="downloadLink" href="#" class="hidden btn-primary w-auto mb-6">Tải phụ đề</a>
		</div>
	</div>

	<script>
		const dropzone = document.getElementById("customDropzone");
		const fileInput = document.getElementById("srtFile");
		const uploadButton = document.getElementById("fileUploadButton");
		const translateButton = document.getElementById("translateBtn");
		const previewArea = document.getElementById("previewArea");
		const progressBar = document.getElementById("progressBar");
		const downloadLink = document.getElementById("downloadLink");

		let originalFileName = '';

		dropzone.addEventListener("dragover", (e) => {
			e.preventDefault();
			dropzone.classList.add("bg-blue-100");
		});

		dropzone.addEventListener("dragleave", () => {
			dropzone.classList.remove("bg-blue-100");
		});

		dropzone.addEventListener("drop", (e) => {
			e.preventDefault();
			dropzone.classList.remove("bg-blue-100");
			const file = e.dataTransfer.files[0];
			handleFile(file);
		});

		uploadButton.addEventListener("click", () => {
			fileInput.click();
		});

		fileInput.addEventListener("change", () => {
			const file = fileInput.files[0];
			handleFile(file);
		});

		function handleFile(file) {
			previewArea.innerHTML = "";
			if (!file) {
				addOutputMessage("Vui lòng chọn tệp phụ đề.");
				return;
			}

			const validExtension = file.name.toLowerCase().endsWith(".srt");
			if (!validExtension) {
				addOutputMessage("Vui lòng chọn tệp phụ đề định dạng .srt.");
				return;
			}

			originalFileName = file.name.replace(/\.srt$/i, '');
			addOutputMessage("Tệp phụ đề sẵn sàng dịch.");
		}

		function addOutputMessage(message) {
			const messageElement = document.createElement("p");
			messageElement.textContent = message;

			previewArea.appendChild(messageElement);

			// Giới hạn hiển thị chỉ 10 dòng mới nhất
			if (previewArea.childNodes.length > 10) {
				previewArea.removeChild(previewArea.firstChild);
			}

			previewArea.scrollTop = previewArea.scrollHeight;
		}

		translateButton.addEventListener("click", async () => {
			const apiKey = document.getElementById('apiKey').value;

			if (!apiKey) {
				addOutputMessage("Vui lòng sử dụng API miễn phí: xxx.");
				return;
			}

			if (!fileInput.files.length) {
				addOutputMessage("Vui lòng chọn tệp phụ đề định dạng .srt.");
				return;
			}

			const file = fileInput.files[0];
			const reader = new FileReader();

			reader.onload = async function () {
				const srtContent = reader.result;
				const CHARACTER_PER_BATCH = 1000;
				const parts = splitSRTContent(srtContent, CHARACTER_PER_BATCH);

				addOutputMessage("Đang tiến hành…");
				progressBar.style.width = "0%";

				const translatedParts = [];

				for (let i = 0; i < parts.length; i++) {
					addOutputMessage(`Đang dịch phần ${i + 1}/${parts.length}…`);
					progressBar.style.width = `${((i + 1) / parts.length) * 100}%`;

					try {
						const response = await fetch("/api/translate", {
							method: "POST",
							headers: { "Content-Type": "application/json" },
							body: JSON.stringify({ inputContent: parts[i], apiKey: apiKey }),
						});

						if (!response.ok) throw new Error(`Lỗi khi dịch phần ${i + 1}.`);
						const data = await response.json();
						const translatedPart = data.translatedContent;

						translatedParts.push(translatedPart);
					} catch (error) {
						console.error(error);
						addOutputMessage(`Lỗi khi dịch phần ${i + 1}.`);
					}
				}

				const translatedContent = translatedParts.join("\n");
				const blob = new Blob([translatedContent], { type: "text/plain" });
				const url = URL.createObjectURL(blob);

				const translatedFileName = `${originalFileName}-translated.srt`;

				downloadLink.href = url;
				downloadLink.download = translatedFileName;
				downloadLink.textContent = `Tải phụ đề: ${translatedFileName}`;
				downloadLink.style.display = "block";

				addOutputMessage("Hoàn thành dịch phụ đề.");
				progressBar.style.width = "100%";
			};

			reader.readAsText(file);
		});

		function splitSRTContent(srtContent, charLimit) {
			const lines = srtContent.split('\n');
			const parts = [];
			let currentPart = '';

			for (const line of lines) {
				if ((currentPart.length + line.length + 1 > charLimit) && line.trim() === '') {
					parts.push(currentPart.trim());
					currentPart = '';
				}
				currentPart += line + '\n';
			}
			if (currentPart) parts.push(currentPart.trim());
			return parts;
		}
	</script>

</section>