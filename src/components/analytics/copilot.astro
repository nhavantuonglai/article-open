---
import Button from '~/components/ui/button.astro';
import CTA from '~/components/widgets/services.astro';
---

<section class="relative md:-mt-[76px] not-prose">
	<div class="absolute inset-0 pointer-events-none" aria-hidden="true"></div>
	<div class="pt-0 md:pt-[120px] pointer-events-none"></div>
	<h1 class="mx-auto max-w-7xl md:px-6 leading-tighter text-center text-4xl md:text-5xl font-bold leading-tighter tracking-tighter mb-6 font-heading">
		Chat AI Cá Nhân
	</h1>

	<div class="mx-auto max-w-7xl md:px-6 px-4">

		<textarea id="input" placeholder="Nhập câu hỏi của bạn…" class="px-4 mb-6 py-6 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900" required></textarea>

		<button id="convert-btn" class="btn-primary w-auto mb-6">Gửi</button>

		<div id="output" class="mb-6 text-lg border border-gray-300 p-4 rounded-lg"></div>

	</div>

	<script client:load>
		document.addEventListener("DOMContentLoaded", function () {
			const buttonConvert = document.getElementById('convert-btn');
			const input = document.getElementById('input');
			const output = document.getElementById('output');

			buttonConvert.addEventListener('click', async function () {
				const inputText = input.value.trim();
				if (!inputText) {
					output.textContent = "Vui lòng nhập nội dung."; // Use textContent for plain text
					return;
				}

				const apiKey = "AIzaSyB5gdj9sFmuVAdygdrt1M6K9YM8dWow-kY";  // Access the API key

				const endpoint = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;

				output.textContent = "Đang xử lý…"; // Use textContent for plain text

				try {
					const response = await fetch(endpoint, {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({
							contents: [
								{
									parts: [
										{ text: inputText }
									]
								}
							]
						})
					});

					if (!response.ok) {
						const error = await response.text();
						try {
							const errorJSON = JSON.parse(error);
							if (errorJSON.error && errorJSON.error.message) {
								output.textContent = `Lỗi từ máy chủ: ${errorJSON.error.message}`; // Use textContent for plain text
							} else {
								output.textContent = `Lỗi từ máy chủ.`; // Use textContent for plain text
							}
						} catch (parseError) {
							output.textContent = `Lỗi từ máy chủ.`; // Use textContent for plain text
							console.error("Could not parse error response as JSON:", parseError);
						}
						console.error('Error response:', response.status, error);
						return;
					}

					const result = await response.json();
					const aiResponse = result.candidates[0].content;

					// Extract the plain text from the response
					if (typeof aiResponse === 'object' && aiResponse !== null && aiResponse.parts && Array.isArray(aiResponse.parts) && aiResponse.parts.length > 0 && aiResponse.parts[0].text) {
						output.textContent = aiResponse.parts[0].text; // Use textContent for plain text
					} else if (typeof aiResponse === 'string') {
						output.textContent = aiResponse; // Use textContent for plain text
					} else {
						output.textContent = "Định dạng phản hồi không được hỗ trợ. Vui lòng kiểm tra console để biết thêm chi tiết."; // Use textContent for plain text
						console.error("Unexpected response format:", aiResponse);
					}

				} catch (error) {
					console.error('Error:', error);
					output.textContent = 'Lỗi kết nối với máy chủ.'; // Use textContent for plain text
				}
			});
		});
	</script>
</section>
