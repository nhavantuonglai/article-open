---
import Button from '~/components/ui/button.astro';
import CTA from '~/components/widgets/services.astro';
---

<section class="relative md:-mt-[76px] not-prose">
	<div class="absolute inset-0 pointer-events-none" aria-hidden="true"></div>
	<div class="pt-0 md:pt-[120px] pointer-events-none"></div>
	<h1 class="mx-auto max-w-7xl md:px-6 leading-tighter text-center text-4xl md:text-5xl font-bold leading-tighter tracking-tighter mb-6 font-heading">
		Trợ lý ảo Gemini AI tích hợp sâu
	</h1>

	<div class="mx-auto max-w-7xl md:px-6 px-4">

		<textarea id="input" placeholder="Nhập câu hỏi của bạn…" class="px-4 mb-6 py-6 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900" required></textarea>

		<button id="convert-btn" class="btn-primary w-auto mb-6">Gửi</button>

		<div id="output" class="mb-6 text-lg border border-gray-300 p-4 rounded-lg"></div>

	</div>

	<script client:load>
		document.addEventListener("DOMContentLoaded", function () {
			const buttonConvert = document.getElementById('convert-btn');
			const input = document.getElementById('input');
			const output = document.getElementById('output');

			buttonConvert.addEventListener('click', async function () {
				const inputText = input.value.trim();
				if (!inputText) {
					output.textContent = "Lỗi nhập liệu không có thông tin, vui lòng kiểm tra lại thông tin đầu vào.";
					return;
				}

				const apiKey = "AIzaSyB5gdj9sFmuVAdygdrt1M6K9YM8dWow-kY";
				const endpoint = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;

				output.textContent = "Đang xử lý…";

				try {
					const response = await fetch(endpoint, {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({
							contents: [
								{
									parts: [
										{ text: inputText }
									]
								}
							]
						})
					});

					if (!response.ok) {
						const error = await response.text();
						try {
							const errorJSON = JSON.parse(error);
							if (errorJSON.error && errorJSON.error.message) {
								output.textContent = `Lỗi máy chủ: ${errorJSON.error.message}. Vui lòng liên hệ quản trị viên để được hỗ trợ.`;
							} else {
								output.textContent = 'Lỗi máy chủ không rõ nguyên nhân. Vui lòng liên hệ quản trị viên để được hỗ trợ.';
							}
						} catch (parseError) {
							output.textContent = 'Lỗi máy chủ không phân tích được nguyên nhân. Vui lòng liên hệ quản trị viên để được hỗ trợ.';
							console.error('Could not parse error response as JSON:', parseError);
						}
						console.error('Error response:', response.status, error);
						return;
					}

					try {
						const result = await response.json();
						const aiResponse = result.candidates[0].content;

						// Loại bỏ mọi thẻ HTML và chỉ hiển thị văn bản thuần
						if (typeof aiResponse === 'object' && aiResponse !== null && aiResponse.parts && Array.isArray(aiResponse.parts) && aiResponse.parts.length > 0 && aiResponse.parts[0].text) {
							output.textContent = aiResponse.parts[0].text.replace(/<\/?[^>]+(>|$)/g, ""); // Loại bỏ thẻ HTML
						} else if (typeof aiResponse === 'string') {
							output.textContent = aiResponse.replace(/<\/?[^>]+(>|$)/g, ""); // Loại bỏ thẻ HTML
						} else {
							output.textContent = "Lỗi nhập liệu không hỗ trợ định dạng, vui lòng chuẩn hóa thông tin trước.";
							console.error("Unexpected response format:", aiResponse);
						}
					} catch (error) {
						console.error('Error:', error);
						output.textContent = 'Lỗi máy chủ kết nối không thành công, vui lòng kiểm tra mạng hoặc thử lại sau.';
					}
				});
			});
		});
	</script>
</section>
