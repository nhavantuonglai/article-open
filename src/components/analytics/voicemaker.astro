---
import Analytics from '~/components/widgets/analytics.astro';
---

<section class="relative md:-mt-[76px] not-prose">

	<Analytics

		id="voicemaker"
		title="Chuyển văn bản thành giọng nói"
		description="Nhập văn bản để chuyển thành file âm thanh MP3"

		inputType="text"
		outputType="text"

		placeholder="Nhập văn bản cần chuyển đổi…"
	/>

</section>

<div id="audioPlayerContainer" class="hidden mt-4">
	<audio id="audioPlayer" controls class="w-full">
		Your browser does not support the audio element.
	</audio>
	<a id="downloadLink" href="#" download="audio.mp3" class="hidden inline-block mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
		Tải xuống file MP3
	</a>
</div>

<script client:load>

	document.addEventListener('DOMContentLoaded', () => {
		const textInput = document.getElementById('voicemaker-input');
		const outputArea = document.getElementById('voicemaker-text-output');
		const audioPlayerContainer = document.getElementById('audioPlayerContainer');
		const audioPlayer = document.getElementById('audioPlayer');
		const downloadLink = document.getElementById('downloadLink');
		const apiKey = "null";

		let debounceTimeout;

		function updateOutput(message, isError = false) {
			const messageElement = document.createElement('div');
			messageElement.className = isError ? 'text-red-500' : 'text-gray-700';
			messageElement.textContent = message;
			outputArea.innerHTML = '';
			outputArea.appendChild(messageElement);
		}

		function resetAudioPlayer() {
			audioPlayerContainer.classList.add('hidden');
			downloadLink.classList.add('hidden');
			audioPlayer.src = '';
		}

		async function convertTextToSpeech(text) {
			try {
				const geminiResponse = await fetch(
					`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${apiKey}`,
					{
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({
							contents: [{
								parts: [{
									text: `Process this text for text-to-speech conversion, maintain proper punctuation and structure: ${text}`
								}]
							}]
						})
					}
				);

				if (!geminiResponse.ok) {
					throw new Error('Text processing failed');
				}

				const geminiResult = await geminiResponse.json();
				const processedText = geminiResult.candidates[0].content.parts[0].text;

				const ttsResponse = await fetch("/api/convert-text-to-speech", {
					method: "POST",
					headers: { 
						"Content-Type": "application/json" 
					},
					body: JSON.stringify({ 
						text: processedText, 
						apiKey 
					})
				});

				if (!ttsResponse.ok) {
					throw new Error('Text to speech conversion failed');
				}

				const data = await ttsResponse.json();
				return data.audioUrl;
			} catch (error) {
				console.error('Conversion error:', error);
				throw error;
			}
		}

		textInput.addEventListener('input', () => {
			clearTimeout(debounceTimeout);
			resetAudioPlayer();
			
			const text = textInput.value.trim();
			if (!text) {
				updateOutput('Vui lòng nhập văn bản cần chuyển đổi.', true);
				return;
			}

			debounceTimeout = setTimeout(async () => {
				try {
					updateOutput('Đang chuyển đổi văn bản thành giọng nói…');

					const audioUrl = await convertTextToSpeech(text);
					
					audioPlayer.src = audioUrl;
					audioPlayerContainer.classList.remove('hidden');
					downloadLink.href = audioUrl;
					downloadLink.classList.remove('hidden');
					
					const fileName = `${text.slice(0, 30).trim().replace(/\s+/g, '_')}.mp3`;
					downloadLink.download = fileName;
					
					updateOutput('Chuyển đổi thành công!');
				} catch (error) {
					updateOutput('Có lỗi xảy ra trong quá trình chuyển đổi.', true);
					console.error(error);
				}
			}, 500);
		});
	});

</script>