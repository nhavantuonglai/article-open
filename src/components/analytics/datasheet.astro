---
import Button from '~/components/ui/button.astro';
import CTA from '~/components/widgets/services.astro';
---

<section class="relative md:-mt-[76px] not-prose">
    <div class="absolute inset-0 pointer-events-none" aria-hidden="true"></div>
    <div class="mx-auto max-w-7xl md:px-6 px-4">

        <div class="border border-primary bg-white text-black p-4 rounded-lg mb-6">

            <h2 class="font-bold text-lg mb-6">Nhập mã sinh viên</h2>

            <textarea id="input" placeholder="Nhập mã sinh viên để tra cứu thông tin." class="w-full mb-6 text-justify text-lg dark:text-slate-400 border border-gray-300 p-4 rounded-lg break-words bg-white dark:bg-slate-900" required style="resize: none; height: 150px;"></textarea>

        </div>

        <div class="border border-primary bg-white text-black p-4 rounded-lg mb-6">

            <h2 class="font-bold text-lg mb-6">Thông tin sinh viên</h2>

            <div id="outputArea" class="overflow-y-auto h-[calc(407px-80px)] p-2 rounded text-justify mb-6 text-lg dark:text-slate-400">
                Kết quả tra cứu thông tin sinh viên hiển thị tại đây.
            </div>

            <div class="w-full bg-gray-200 rounded h-2 mb-6">
                <div id="progressBar" class="h-2 bg-primary rounded" style="width: 0%;"></div>
            </div>

        </div>
    </div>

    <script client:load>
        document.addEventListener('DOMContentLoaded', () => {
            const studentIdInput = document.getElementById('input');
            const resultOutput = document.getElementById('outputArea');
            const progressBar = document.getElementById('progressBar');

            let debounceTimeout;

            studentIdInput.addEventListener('input', () => {
                const studentId = studentIdInput.value.trim();

                clearTimeout(debounceTimeout);

                if (!studentId) {
                    resultOutput.textContent = 'Vui lòng nhập mã sinh viên.';
                    progressBar.style.width = '0%';
                    progressBar.style.display = 'none';
                    return;
                }

                debounceTimeout = setTimeout(async () => {
                    resultOutput.textContent = 'Đang tra cứu…';
                    progressBar.style.width = '10%';
                    progressBar.style.display = 'block';

                    try {
                        const response = await fetch('https://docs.google.com/spreadsheets/d/1JWe3AwvQHyrUWWE4D9KCRWXnTrLbAp73/edit?usp=sharing&ouid=111668476247913713641');

                        if (!response.ok) {
                            throw new Error('Không thể truy cập dữ liệu.');
                        }

                        const csvText = await response.text();
                        progressBar.style.width = '50%';

                        const rows = csvText.split('\n').map(row => row.split(','));
                        const headers = rows[0];
                        const studentRow = rows.find(row => row[2] === studentId);

                        if (studentRow) {
                            const studentData = headers.map((header, index) => `<strong>${header}:</strong> ${studentRow[index]}`).join('<br>');

                            setTimeout(() => {
                                resultOutput.innerHTML = studentData;
                            }, 1000);
                        } else {
                            resultOutput.textContent = 'Không tìm thấy thông tin mã sinh viên.';
                        }

                    } catch (error) {
                        resultOutput.textContent = 'Có lỗi xảy ra khi tra cứu dữ liệu.';
                        console.error(error);
                    }

                    setTimeout(() => {
                        progressBar.style.width = '100%';
                    }, 1000);

                    setTimeout(() => {
                        progressBar.style.display = 'none';
                    }, 1500);

                }, 500);
            });
        });
    </script>

</section>