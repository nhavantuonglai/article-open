---
import Analytics from '~/components/widgets/analytics.astro';
---

<section class="relative md:-mt-[76px] not-prose">

	<Analytics

		id="ocr"
		title="OCR với Gemini API"
		description="Trích xuất văn bản từ hình ảnh và PDF bằng Gemini API."

		inputType="file"
		outputType="text"

		placeholder="Kéo thả hoặc nhấp để chọn tệp (PNG, JPG, PDF)"
		apiKeyPlaceholder="Nhập mã API Gemini của bạn"

		debounceTime={1000}

	/>

</section>

<script client:load>

	const analytics = document.querySelector('#ocr-processor');

	analytics.addEventListener('fileChange', async (event) => {
		const file = event.detail;
		if (!file) return;

		const validTypes = ['image/jpeg', 'image/png', 'application/pdf'];
		if (!validTypes.includes(file.type)) {
			analytics.setError('Vui lòng chọn tệp PNG, JPG hoặc PDF');
			return;
		}

		analytics.clearOutput();
	});

	analytics.addEventListener('submit', async (event) => {
		const { file, apiKey } = event.detail;

		if (!apiKey) {
			analytics.setError('Vui lòng nhập mã API Gemini');
			return;
		}

		if (!file) {
			analytics.setError('Vui lòng chọn tệp để xử lý');
			return;
		}

		try {
			analytics.setProcessing(true);

			const formData = new FormData();
			formData.append('file', file);
			formData.append('apiKey', apiKey);

			const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${apiKey}', {
				method: 'POST',
				body: formData
			});

			const data = await response.json();

			if (!response.ok) {
				throw new Error(data.message || 'Lỗi xử lý OCR');
			}

			if (data.error) {
				if (data.error.includes('API key')) {
					analytics.setError('Mã API không hợp lệ hoặc đã hết hạn');
				} else {
					analytics.setError(data.error);
				}
				return;
			}

			analytics.setOutput(data.text || 'Không tìm thấy văn bản trong tệp');
			analytics.setSuccess(true);

		} catch (error) {
			console.error(error);
			analytics.setError(`Lỗi: ${error.message}`);
		} finally {
			analytics.setProcessing(false);
		}
	});

	analytics.addEventListener('copy', () => {
		const outputText = analytics.getOutput();
		if (!outputText) return;

		navigator.clipboard.writeText(outputText)
			.then(() => {
				analytics.showCopySuccess();
			})
			.catch(error => {
				console.error('Lỗi sao chép:', error);
				analytics.setError('Không thể sao chép văn bản');
			});
	});

</script>