---
import Image from '~/components/common/image.astro';
import type { CallToAction } from '~/types';
import Button from '~/components/ui/button.astro';
import { Slideup } from '~/assets/framer.jsx';

export interface Props {
	title?: string;
	subtitle?: string;
	tagline?: string;
	content?: string;
	actions?: string | CallToAction[];
	image?: string | any;
	springs?: any[];
	summers?: any[];
	autumns?: any[];
	winters?: any[];
	id?: string;
}

const {
	title = await Astro.slots.render('title'),
	subtitle = await Astro.slots.render('subtitle'),
	tagline,
	content = await Astro.slots.render('content'),
	actions = await Astro.slots.render('actions'),
	image = await Astro.slots.render('image'),
	springs = [],
	summers = [],
	autumns = [],
	winters = [],
	id = "hero-gallery"
} = Astro.props;

const shuffleArray = (array) => {
		const shuffled = [...array];
		for (let i = shuffled.length - 1; i > 0; i--) {
				const j = Math.floor(Math.random() * (i + 1));
				[shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
		}
		return shuffled;
};

const randomsprings = shuffleArray(springs);
const randomsummers = shuffleArray(summers);
const randomautumns = shuffleArray(autumns);
const randomwinters = shuffleArray(winters);
---

<section id={id} class="relative not-prose w-full h-screen mb-6">

	<div class="absolute inset-0 z-0">

		<div class="gallery-container absolute inset-0">

			<div class="gallery-row left-to-right">
				<div class="gallery-track">
					{randomsprings.map((image) => (
						<div class="gallery-item">
							<img src={image.src} alt={image.alt || "Gallery image"} class="rounded-lg" width="300" height="200" />
						</div>
					))}
					{randomsprings.map((image) => (
						<div class="gallery-item">
							<img src={image.src} alt={image.alt || "Gallery image"} class="rounded-lg" width="300" height="200" />
						</div>
					))}
				</div>
			</div>

			<div class="gallery-row right-to-left">
				<div class="gallery-track">

					{randomsummers.map((image) => (
						<div class="gallery-item">
							<img src={image.src} alt={image.alt || "Gallery image"} class="rounded-lg" width="300" height="200" />
						</div>
					))}

					{randomsummers.map((image) => (
						<div class="gallery-item">
							<img src={image.src} alt={image.alt || "Gallery image"} class="rounded-lg" width="300" height="200" />
						</div>
					))}

				</div>
			</div>

			<div class="gallery-row left-to-right">
				<div class="gallery-track">

					{randomautumns.map((image) => (
						<div class="gallery-item">
							<img src={image.src} alt={image.alt || "Gallery image"} class="rounded-lg" width="300" height="200" />
						</div>
					))}

					{randomautumns.map((image) => (
						<div class="gallery-item">
							<img src={image.src} alt={image.alt || "Gallery image"} class="rounded-lg" width="300" height="200" />
						</div>
					))}

				</div>
			</div>

			<div class="gallery-row right-to-left">
				<div class="gallery-track">

					{randomwinters.map((image) => (
						<div class="gallery-item">
							<img src={image.src} alt={image.alt || "Gallery image"} class="rounded-lg" width="300" height="200" />
						</div>
					))}

					{randomwinters.map((image) => (
						<div class="gallery-item">
							<img src={image.src} alt={image.alt || "Gallery image"} class="rounded-lg" width="300" height="200" />
						</div>
					))}

				</div>
			</div>

		</div>
			
		<div class="overlay-container absolute inset-0 z-10">
			<div class="flex w-full h-full">
				<div class="w-4/5 h-full blur-gradient"></div>
				<div class="w-1/5 h-full"></div>
			</div>
		</div>
		
		<div class="absolute inset-0 z-20 flex items-center">
			<div class="relative max-w-7xl mx-auto px-4 sm:px-6 w-full">
				<div class="lg:flex lg:items-center lg:gap-8">
					<div class="basis-1/2 text-center lg:text-left pb-10 md:pb-16 mx-auto">

						{tagline && (
							<p class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase" set:html={tagline} />
						)}

						{title && (<h1 set:html={title} class="text-white" />)}

						<div class="max-w-3xl mx-auto lg:max-w-none">
							{subtitle && (
								<p class="text-xl text-white text-justify mb-6" set:html={subtitle} />
							)}

							{actions && (
								<div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 lg:justify-start lg:m-0 lg:max-w-7xl">
									{Array.isArray(actions) ? (
										actions.map((action, index) => (
											<div key={index} class="flex w-full sm:w-auto">
												<Button {...(action || {})} target="_blank" />
											</div>
										))
									) : (
										<Fragment set:html={actions} />
									)}
								</div>
							)}

						</div>

						{content && <Fragment set:html={content} />}

					</div>
				<div class="basis-1/2 text-center lg:text-left pb-10 md:pb-16 mx-auto"></div>

			</div>

		</div>

	</div>

</section>

<style>

	.gallery-container {
		width: 100%;
		height: 100%;
		overflow: hidden;
	}

	.gallery-row {
		overflow: hidden;
		position: relative;
		width: 100%;
		height: 25%;
		margin: 0;
	}

	.gallery-track {
		display: flex;
		gap: 10px;
		width: max-content;
		height: 100%;
	}

	.gallery-item {
		flex: 0 0 auto;
		width: 300px;
		height: 100%;
	}

	.gallery-item img {
		width: 100%;
		height: 100%;
		object-fit: cover;
	}

	.left-to-right .gallery-track {
		animation: scroll-left 120s linear infinite;
	}

	.right-to-left .gallery-track {
		animation: scroll-right 120s linear infinite;
	}

	.overlay-container {
		width: 100%;
		height: 100%;
	}

	.blur-gradient {
		position: relative;
		background-color: transparent;
	}

	.blur-gradient::before {
		content: "";
		position: absolute;
		inset: 0;
		backdrop-filter: blur(200px);
		background-color: rgba(0, 0, 0, 0.2);
		mask-image: linear-gradient(to right, rgba(0, 0, 0, 1) 0%, rgba(0, 0, 0, 0) 100%);
		-webkit-mask-image: linear-gradient(to right, rgba(0, 0, 0, 1) 0%, rgba(0, 0, 0, 0) 100%);
	}

	@keyframes scroll-left {
		0% { transform: translateX(0); }
		100% { transform: translateX(calc(-100% / 2)); }
	}

	@keyframes scroll-right {
		0% { transform: translateX(calc(-100% / 2)); }
		100% { transform: translateX(0); }
	}

</style>