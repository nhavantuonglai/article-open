---
import { Icon } from "astro-icon/components";
import Logo from "~/assets/logo.astro";
import Button from "~/components/ui/button.astro";
import { getHomePermalink, trimSlash } from "~/utils/permalinks";

interface Link {
  text?: string;
  href?: string;
  icon?: string;
}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<Link>;
  position?: string;
}

const {
  id = "header",
  links = [],
  actions = [],
  position = "center",
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<header
  id={id}
  class="fixed top-0 left-0 w-full z-40 bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-800"
>
  <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a href={getHomePermalink()} class="flex items-center">
          <Logo />
        </a>
      </div>
      
      <!-- Navigation Links - Desktop -->
      <nav class="hidden md:flex space-x-8">
        {links.map((link) => (
          !link.links?.length ? (
            <a
              href={link.href}
              class={`text-sm font-medium transition duration-150 ease-in-out ${
                currentPath === link.href
                  ? "text-primary-600 dark:text-primary-400"
                  : "text-gray-700 hover:text-primary-600 dark:text-gray-300 dark:hover:text-primary-400"
              }`}
            >
              {link.icon && <Icon name={link.icon} class="w-5 h-5 inline-block mr-1" />}
              {link.text}
            </a>
          ) : (
            <div class="relative group">
              <button
                class="text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center transition duration-150 ease-in-out group-hover:text-primary-600 dark:group-hover:text-primary-400"
              >
                {link.icon && <Icon name={link.icon} class="w-5 h-5 inline-block mr-1" />}
                {link.text}
                <Icon name="tabler:chevron-down" class="w-4 h-4 ml-1" />
              </button>
              <div class="absolute left-0 mt-2 w-48 bg-white dark:bg-gray-900 rounded-md shadow-lg py-1 z-10 hidden group-hover:block">
                {link.links.map((sublink) => (
                  <a
                    href={sublink.href}
                    class={`block px-4 py-2 text-sm ${
                      currentPath === sublink.href
                        ? "text-primary-600 dark:text-primary-400 bg-gray-100 dark:bg-gray-800"
                        : "text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800"
                    }`}
                  >
                    {sublink.icon && <Icon name={sublink.icon} class="w-4 h-4 inline-block mr-1" />}
                    {sublink.text}
                  </a>
                ))}
              </div>
            </div>
          )
        ))}
      </nav>
      
      <!-- Action Buttons - Desktop -->
      <div class="hidden md:flex items-center space-x-4">
        {actions.map((action) => (
          <Button
            href={action.href}
            variant={action.text?.includes("Đăng ký") || action.text?.includes("Sign up") ? "primary" : "outline"}
          >
            {action.icon && <Icon name={action.icon} class="w-5 h-5 mr-1" />}
            <span>{action.text}</span>
          </Button>
        ))}
      </div>
      
      <!-- Mobile menu button -->
      <button
        type="button"
        class="md:hidden inline-flex items-center justify-center p-2 rounded-md text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none"
        aria-controls="mobile-menu"
        aria-expanded="false"
        id="mobile-menu-button"
      >
        <span class="sr-only">Open main menu</span>
        <Icon name="tabler:menu" class="h-6 w-6" />
      </button>
    </div>
  </div>
  
  <!-- Mobile menu, show/hide based on menu state -->
  <div class="md:hidden hidden" id="mobile-menu">
    <div class="px-2 pt-2 pb-4 space-y-1 border-t border-gray-200 dark:border-gray-800 bg-white dark:bg-gray-900">
      {links.map((link) => (
        !link.links?.length ? (
          <a
            href={link.href}
            class={`block px-3 py-2 rounded-md text-base font-medium ${
              currentPath === link.href
                ? "text-primary-600 dark:text-primary-400 bg-gray-100 dark:bg-gray-800"
                : "text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800"
            }`}
          >
            {link.icon && <Icon name={link.icon} class="w-5 h-5 inline-block mr-1" />}
            {link.text}
          </a>
        ) : (
          <div>
            <button
              class="w-full text-left px-3 py-2 rounded-md text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 flex justify-between items-center"
              id={`dropdown-${link.text?.replace(/\s+/g, '-').toLowerCase()}`}
            >
              <span>
                {link.icon && <Icon name={link.icon} class="w-5 h-5 inline-block mr-1" />}
                {link.text}
              </span>
              <Icon name="tabler:chevron-down" class="w-4 h-4" />
            </button>
            <div class="hidden pl-4 space-y-1" id={`dropdown-items-${link.text?.replace(/\s+/g, '-').toLowerCase()}`}>
              {link.links.map((sublink) => (
                <a
                  href={sublink.href}
                  class={`block px-3 py-2 rounded-md text-sm font-medium ${
                    currentPath === sublink.href
                      ? "text-primary-600 dark:text-primary-400 bg-gray-100 dark:bg-gray-800"
                      : "text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800"
                  }`}
                >
                  {sublink.icon && <Icon name={sublink.icon} class="w-4 h-4 inline-block mr-1" />}
                  {sublink.text}
                </a>
              ))}
            </div>
          </div>
        )
      ))}
      
      <!-- Action Buttons - Mobile -->
      <div class="pt-4 space-y-2">
        {actions.map((action) => (
          <Button
            href={action.href}
            variant={action.text?.includes("Đăng ký") || action.text?.includes("Sign up") ? "primary" : "outline"}
            class="w-full"
          >
            {action.icon && <Icon name={action.icon} class="w-5 h-5 mr-1" />}
            <span>{action.text}</span>
          </Button>
        ))}
      </div>
    </div>
  </div>
</header>

<script>
  // Toggle mobile menu
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
      });
    }
    
    // Handle dropdown toggles
    document.querySelectorAll('[id^="dropdown-"]').forEach((button) => {
      if (!button.id.includes('items')) {
        button.addEventListener('click', () => {
          const targetId = `dropdown-items-${button.id.replace('dropdown-', '')}`;
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            targetElement.classList.toggle('hidden');
          }
        });
      }
    });
  });
</script>

<!-- Add space below header to prevent content from being hidden -->
<div class="h-16"></div>