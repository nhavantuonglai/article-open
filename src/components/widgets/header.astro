---
import { Icon } from "astro-icon/components";
import Logo from "~/assets/logo.astro";
import { getHomePermalink, trimSlash } from "~/utils/permalinks";

interface Link {
	text?: string;
	href?: string;
	ariaLabel?: string;
	icon?: string;
	links?: Array<menulink>;
}

interface menulink extends Link {
	links?: Array<menulink>;
}

export interface Props {
	id?: string;
	links?: Array<menulink>;
}

const {
	id = "header",
	links = headerData.links,
} = Astro.props;

const pathcurrent = `/${trimSlash(new URL(Astro.url).pathname)}`;
const pathcurrentDisplay = pathcurrent.replace(" | nhavantuonglai", "");
const pathsegment = pathcurrentDisplay.split('/').filter(Boolean);
const pathlink = pathsegment.map((segment, i) => ({
	text: segment,
	path: `/${pathsegment.slice(0, i + 1).join('/')}`
}));

const baselink = "text-sm hover:text-primary px-3 flex items-center";
const menuitem = `${baselink} py-0.5 text-ellipsis whitespace-nowrap overflow-hidden`;
const dropitem = `${baselink} py-1.5 mb-1 w-[200px]`;
---

<div class="h-[24px] w-full">

	<header
		class="fixed top-0 left-0 right-0 w-full z-50 bg-white/80 backdrop-blur-sm border-b border-gray-200/50 transition-transform duration-300"
		{...id ? { id } : {}}
	>

		<div class="relative text-default py-0.5 px-2 mx-auto w-full flex items-center justify-start">
			<nav class="items-center flex text-default" aria-label="navigation">
				<ul class="flex flex-row text-sm tracking-tight font-medium">

					{links.map(({ text, href, links: linkchild }, index) => (
						<li key={index} class={linkchild?.length ? "dropdown relative group" : ""}>

							{linkchild?.length ? (
								<>

									<span class={`${menuitem} text-gray-800 cursor-default`}>
										{text}
									</span>

									<ul class="dropdown-menu absolute left-0 top-full mt-0.5 bg-white/90 backdrop-blur-sm rounded-lg min-w-[160px] shadow-md">

										{linkchild.map(({ text: textchild, href: hrefchild, links: linkgrand }, subchild) => (
											<li key={subchild} class={linkgrand?.length ? "child-dropdown relative" : ""}>
												<a
													class:list={[
														dropitem,
														{ "aw-link-active": hrefchild === pathcurrent },
													]}
													href={hrefchild}
													target="_blank"
												>
													<span class="block text-ellipsis whitespace-nowrap overflow-hidden">
														{textchild}
													</span>
												</a>

												{linkgrand?.length && (
													<ul class="grand-dropdown absolute left-full top-0 bg-white/90 backdrop-blur-sm rounded-lg min-w-[160px] shadow-md">
														{linkgrand.map(({ text: textgrand, href: hrefgrand }, subgrand) => (
															<li key={subgrand}>
																<a
																	class:list={[
																		dropitem,
																		{ "aw-link-active": hrefgrand === pathcurrent },
																	]}
																	href={hrefgrand}
																	target="_blank"
																>
																	<span class="block text-ellipsis whitespace-nowrap overflow-hidden">
																		{textgrand}
																	</span>
																</a>
															</li>
														))}
													</ul>
												)}

											</li>
										))}

									</ul>
								</>
							) : (
								<a
									class:list={[
										menuitem,
										{ "aw-link-active": href === pathcurrent },
									]}
									href={href}
									target="_blank"
								>
									{text}
								</a>
							)}

						</li>
					))}

					{pathsegment.length > 0 ? (
						pathlink.slice(-2).map((segment, idx) => (
							<li key={`path-${idx}`}>

								<a
									class:list={[
										menuitem,
										{ "aw-link-active": idx === pathlink.slice(-2).length - 1 },
									]}
									href={segment.path}
									target="_blank"
								>
									{`/${segment.text}`}
								</a>

							</li>
						))
					) : (
						<li>

							<a class:list={[menuitem, "aw-link-active"]} href="/" target="_blank">
								/
							</a>

						</li>
					)}

				</ul>
			</nav>
		</div>

	</header>

</div>

<script>

	const header = document.querySelector("header");
	let lastScrollTop = 0;

	window.addEventListener("scroll", () => {
		let scrollTop = window.pageYOffset || document.documentElement.scrollTop;
		header.style.transform = scrollTop > lastScrollTop ? "translateY(-100%)" : "translateY(0)";
		lastScrollTop = Math.max(scrollTop, 0);
	});

	document.addEventListener("mousemove", (e) => {
		if (e.clientY < 50) header.style.transform = "translateY(0)";
	});

</script>

<style>

	.dropdown-menu,
	.grand-dropdown {
		@apply hidden;
	}

	.group:hover > .dropdown-menu,
	.child-dropdown:hover > .grand-dropdown {
		@apply block;
	}

	.aw-link-active {
		@apply text-primary font-bold;
	}

</style>