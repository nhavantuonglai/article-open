---
import { APP_BLOG } from 'nhavantuonglai:config';
import type { Post } from '~/types';

import Image from '~/components/common/image.astro';
import { findImage } from '~/utils/images';
import { getPermalink } from '~/utils/permalinks';

export interface Props {
	post: Post;
}

const { post } = Astro.props;
const image = await findImage(post.image);

const truncateText = (text: string, maxLength: number, isTitle: boolean = false) => {
	const words = text.match(/[^\s,]+/g) || [];
	const truncated = words.slice(0, maxLength).join(' ');
	return isTitle && text.length > maxLength ? truncated + '…' : truncated + (words.length > maxLength ? '…' : '');
};

---

<article class="mb-6 transition">

	{image && (

		<div class="relative md:h-64 bg-gray-400 dark:bg-slate-700 rounded shadow-lg mb-6">

			<a href={getPermalink(post.permalink, 'post')} target="_blank">

				<Image
					src={image}
					class="w-full md:h-full rounded shadow-lg bg-gray-400 dark:bg-slate-700"
					width={600}
					height={407}
					widths={[600, 407]}
					alt={post.title}
					layout="cover"
					loading="lazy"
					decoding="async"
				/>
			</a>

		</div>

	)}

	<h3>

		{APP_BLOG?.post?.isEnabled ? (
			<a
				href={getPermalink(post.permalink, 'post')}
				class="hover:text-primary dark:hover:text-secondary transition ease-in duration-200"
				target="_blank"
			>
				{truncateText(post.title, 60, true)}
			</a>
		) : (
			truncateText(post.title, 60, true)
		)}

	</h3>

	<p>{truncateText(post.description, 30)}</p>

</article>