---
import PostTags from '~/components/article/tags.astro';
import { getFormattedDate } from '~/utils/utils';
import type { Post } from '~/types';

export interface Props {
	post: Post;
	url: string | URL;
}

const { post, url } = Astro.props;
const { Content } = post;
const commonClasses = "max-w-3xl mx-auto text-justify";
---

<section class="max-w-8xl mx-auto py-20 px-4 sm:px-6 pb-10">
	<article>

		<header>

			<h1 class={`${commonClasses} text-4xl md:text-5xl font-bold text-primary leading-tighter tracking-tighter font-heading mt-4 mb-6`}>
				{post.title}
			</h1>

			<p class={`${commonClasses} text-xl md:text-2xl mt-4 mb-6`}>
				{post.description}
			</p>

			<div class={`${commonClasses} text-xl md:text-2xl flex justify-between flex-col sm:flex-row mt-4 mb-6 sm:items-center`}>

				<p>

					<time datetime={post.pubDatetime} class="inline-block">
						{`${new Date(post.pubDatetime)
							.toLocaleDateString('vi-VN', { day: 'numeric', month: 'numeric', year: 'numeric' })
							.replace(/(\d{1,2})\/(\d{1,2})\/(\d{4})/, 'Đăng ngày $1 tháng $2 năm $3')}`}
					</time>

					{post.readingTime && (
						<>
							· <span>{post.readingTime}</span> phút đọc
						</>
					)}

					<span id="counter"></span> lượt xem.

					<script client:load>
						let count = localStorage.getItem('pageCounter');
						if (count === null) {
							count = Math.floor(Math.random() * (543 - 74 + 1)) + 45;
						} else {
							count = parseInt(count);
						}
						count += 1;
						localStorage.setItem('pageCounter', count);
						const counterElement = document.getElementById('counter');
						counterElement.textContent = count;
					</script>

				</p>
			</div>

		</header>

		<div class={`${commonClasses} mt-4 mb-6`}>
			<div id="index"></div>
		</div>

		<div class={`${commonClasses} prose prose-xl md:text-2xl prose-headings:font-heading prose-headings:leading-tighter prose-headings:tracking-tighter prose-headings:text-primary prose-h2:font-bold prose-h3:font-bold prose-h3:italic prose-h4:italic prose-a:font-bold prose-a:text-primary prose-a:target-blank prose-img:rounded-md prose-img:w-full prose-img:h-auto mt-4 mb-6 prose-headings:scroll-mt-[20px]`}>

			{Content ? <Content /> : <Fragment set:html={post.content || ''} />}

		</div>

		<div class={`${commonClasses} flex justify-between flex-col sm:flex-row mt-4 mb-6`}>
			<PostTags tags={post.tags} class="mr-5 rtl:mr-0 rtl:ml-5" />
		</div>

	</article>
</section>

<script type="module">

	function generateTOC() {
		const index = document.getElementById('index');
		const headings = document.querySelectorAll('h2, h3, h4');
		const tocList = document.createElement('ul');
		let currentParent = null;

		headings.forEach(heading => {
			const listItem = document.createElement('li');
			const anchor = document.createElement('a');
			anchor.href = `#${heading.id}`;
			anchor.textContent = heading.textContent;
			listItem.appendChild(anchor);

			switch (heading.tagName.toLowerCase()) {
				case 'h2':
					break;
				case 'h3':
					listItem.style.fontStyle = 'italic';
					break;
				case 'h4':
					break;
			}

			if (heading.tagName.toLowerCase() === 'h3' || heading.tagName.toLowerCase() === 'h4') {
				if (currentParent) {
					const subList = currentParent.querySelector('ul') || document.createElement('ul');
					subList.appendChild(listItem);
					currentParent.appendChild(subList);
				}
			} else {
				tocList.appendChild(listItem);
				currentParent = listItem;
			}
		});

		index.appendChild(tocList);
		hideLastTOCItems(tocList, 8);
	}

	function hideLastTOCItems(tocList, count) {
		const items = tocList.querySelectorAll('li');
		const totalItems = items.length;
		const itemsToHide = Math.min(count, totalItems);

		for (let i = totalItems - itemsToHide; i < totalItems; i++) {
			items[i].style.display = 'none';
		}
	}

	window.requestAnimationFrame(generateTOC);

</script>