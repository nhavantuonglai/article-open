---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/button.astro';
import type { APIRoute } from 'astro';
import nodemailer from 'nodemailer';

export const post: APIRoute = async ({ request }) => {
	const formData = await request.formData();
	const name = formData.get('name');
	const email = formData.get('email');

	const transporter = nodemailer.createTransport({
		service: 'gmail',
		auth: {
			user: 'info@nhavantuonglai.com',
			pass: 'uehiseilqrtecfpu'
		}
	});

	const mailOptions = {
		from: 'info@nhavantuonglai.com',
		to: 'info@nhavantuonglai.com',
		subject: 'Tin nhắn mới từ ${name} | nhavantuonglai.com',
		text: `Name: ${name}\nEmail: ${email}`
	};

	try {
		await transporter.sendMail(mailOptions);
		return new Response(JSON.stringify({ message: 'Email đã gửi thành công.' }), { status: 200 });
	} catch (error) {
		return new Response(JSON.stringify({ message: 'Email đã gửi thất bại.', error: error.message }), { status: 500 });
	}

};

const { inputs, textarea, disclaimer, button = 'Contact us', description = '' } = Astro.props;

---

<form>
	{
		inputs &&
			inputs.map(
				({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '' }) =>
					name && (

						<div class="mb-6 relative mx-auto max-w-7xl px-4 md:px-6 text-default">

							{label && (
								<label for={name} class="mb-2 block text-sm font-medium">
									{label}
								</label>
							)}

							<input
								type={type}
								name={name}
								id={name}
								autocomplete={autocomplete}
								placeholder={placeholder}
								class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
							/>

						</div>

					)
			)
	}

	{
		disclaimer && (

			<div class="mt-1 flex items-start">
				<div class="px-4 md:px-6 text-default mt-0.5">
					<input
						id="disclaimer"
						name="disclaimer"
						type="checkbox"
						class="cursor-pointer mt-1 py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
					/>
				</div>

				<div class="ml-0.5">
					<label for="disclaimer" class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400">
						{disclaimer.label}
					</label>
				</div>

			</div>
		)
	}

	{
		button && (

			<div class="mt-10 grid px-4 md:px-6">
				<Button variant="primary" type="submit">
					{button}
				</Button>
			</div>

		)
	}

</form>
